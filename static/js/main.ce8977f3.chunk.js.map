{"version":3,"sources":["flexible.js","page/index.ts","routers/index.ts","App.tsx","serviceWorker.ts","index.tsx","config/index.ts"],"names":["win","lib","tid","doc","document","docEl","documentElement","metaEl","querySelector","flexibleEl","dpr","scale","flexible","console","warn","match","getAttribute","parseFloat","parseInt","content","initialDpr","maximumDpr","toFixed","isIPhone","navigator","appVersion","devicePixelRatio","setAttribute","createElement","firstElementChild","appendChild","wrap","write","innerHTML","refreshRem","width","getBoundingClientRect","rem","style","fontSize","addEventListener","clearTimeout","setTimeout","e","persisted","readyState","body","rem2px","d","val","this","px2rem","window","HomeIndex","lazy","Routers","path","config","preLink","component","root","notExect","withRouter","map","router","exact","key","push","to","Boolean","location","hostname","ReactDOM","render","fallback","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message","nftAddress"],"mappings":"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","file":"static/js/main.ce8977f3.chunk.js","sourcesContent":["(function (win, lib) {\n  var doc = win.document;\n  var docEl = doc.documentElement;\n  var metaEl = doc.querySelector('meta[name=\"viewport\"]');\n  var flexibleEl = doc.querySelector('meta[name=\"flexible\"]');\n  var dpr = 0;\n  var scale = 0;\n  var tid;\n  var flexible = lib.flexible || (lib.flexible = {});\n\n  if (metaEl) {\n    console.warn(\"将根据已有的meta标签来设置缩放比例\");\n    var match = metaEl.getAttribute(\"content\").match(/initial-scale=([\\d.]+)/);\n    if (match) {\n      scale = parseFloat(match[1]);\n      dpr = parseInt(1 / scale);\n    }\n  } else if (flexibleEl) {\n    var content = flexibleEl.getAttribute(\"content\");\n    if (content) {\n      var initialDpr = content.match(/initial-dpr=([\\d.]+)/);\n      var maximumDpr = content.match(/maximum-dpr=([\\d.]+)/);\n      if (initialDpr) {\n        dpr = parseFloat(initialDpr[1]);\n        scale = parseFloat((1 / dpr).toFixed(2));\n      }\n      if (maximumDpr) {\n        dpr = parseFloat(maximumDpr[1]);\n        scale = parseFloat((1 / dpr).toFixed(2));\n      }\n    }\n  }\n\n  if (!dpr && !scale) {\n    // var isAndroid = win.navigator.appVersion.match(/android/gi);\n    var isIPhone = win.navigator.appVersion.match(/iphone/gi);\n    var devicePixelRatio = win.devicePixelRatio;\n    if (isIPhone) {\n      // iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案\n      if (devicePixelRatio >= 3 && (!dpr || dpr >= 3)) {\n        dpr = 3;\n      } else if (devicePixelRatio >= 2 && (!dpr || dpr >= 2)) {\n        dpr = 2;\n      } else {\n        dpr = 1;\n      }\n    } else {\n      // 其他设备下，仍旧使用1倍的方案\n      dpr = 1;\n    }\n    scale = 1 / dpr;\n  }\n\n  docEl.setAttribute(\"data-dpr\", dpr);\n  if (!metaEl) {\n    metaEl = doc.createElement(\"meta\");\n    metaEl.setAttribute(\"name\", \"viewport\");\n    metaEl.setAttribute(\n      \"content\",\n      \"initial-scale=\" +\n        scale +\n        \", maximum-scale=\" +\n        scale +\n        \", minimum-scale=\" +\n        scale +\n        \", user-scalable=no\"\n    );\n    if (docEl.firstElementChild) {\n      docEl.firstElementChild.appendChild(metaEl);\n    } else {\n      var wrap = doc.createElement(\"div\");\n      wrap.appendChild(metaEl);\n      doc.write(wrap.innerHTML);\n    }\n  }\n  function refreshRem() {\n    var width = docEl.getBoundingClientRect().width;\n    if (width / dpr < 1980) {\n      width = 1980 * dpr;\n    } else if (width / dpr > 5760) {\n      width = 5760 * dpr;\n    }\n    var rem = width / 10;\n    docEl.style.fontSize = rem + \"px\";\n    flexible.rem = win.rem = rem;\n  }\n\n  win.addEventListener(\n    \"resize\",\n    function () {\n      clearTimeout(tid);\n      tid = setTimeout(refreshRem, 300);\n    },\n    false\n  );\n  win.addEventListener(\n    \"pageshow\",\n    function (e) {\n      if (e.persisted) {\n        clearTimeout(tid);\n        tid = setTimeout(refreshRem, 300);\n      }\n    },\n    false\n  );\n\n  if (doc.readyState === \"complete\") {\n    doc.body.style.fontSize = 12 * dpr + \"px\";\n  } else {\n    doc.addEventListener(\n      \"DOMContentLoaded\",\n      function (e) {\n        doc.body.style.fontSize = 12 * dpr + \"px\";\n      },\n      false\n    );\n  }\n\n  refreshRem();\n\n  flexible.dpr = win.dpr = dpr;\n  flexible.refreshRem = refreshRem;\n  flexible.rem2px = function (d) {\n    var val = parseFloat(d) * this.rem;\n    if (typeof d === \"string\" && d.match(/rem$/)) {\n      val += \"px\";\n    }\n    return val;\n  };\n  flexible.px2rem = function (d) {\n    var val = parseFloat(d) / this.rem;\n    if (typeof d === \"string\" && d.match(/px$/)) {\n      val += \"rem\";\n    }\n    return val;\n  };\n})(window, window[\"lib\"] || (window[\"lib\"] = {}));\n","import { lazy } from \"react\";\nconst HomeIndex = lazy(() => import(\"./home/homeIndex\"));\nexport { HomeIndex };\n","import React from \"react\";\nimport { HomeIndex } from \"../page\";\nimport config from \"../config/index\";\nexport type RouterType = {\n  path: string;\n  component: React.LazyExoticComponent<any>;\n  root: string[];\n  notExect?: boolean;\n};\n\nconst HomeRouter: RouterType = {\n  path: config.preLink + \"/\",\n  component: HomeIndex,\n  root: [],\n  notExect: false,\n};\n\nconst Routers: RouterType[] = [HomeRouter];\nexport { Routers };\n","import React from \"react\";\nimport { Redirect, Route, Switch, withRouter } from \"react-router\";\nimport { Routers } from \"./routers\";\nimport \"./flexible\";\nimport \"./App.less\";\nimport config from \"./config/index\";\nfunction App() {\n  return (\n    <Switch>\n      {Routers.map((router) => (\n        <Route\n          exact={!router.notExect}\n          key={router.path}\n          path={router.path}\n          component={router.component}\n        ></Route>\n      ))}\n      {/* 默认路由 */}\n      <Redirect push exact to={config.preLink + \"/\"} />\n    </Switch>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Suspense fallback={<div></div>}>\n      <App />\n    </Suspense>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","export default {\n  nftAddress: \"0x821d269cedfdca82ec831445b76b329b5eaf18e0\",\n  preLink: \"\",\n};\n"],"sourceRoot":""}